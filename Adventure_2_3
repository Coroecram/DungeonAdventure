class Adventure

def initialize()
	
	@objects = []
	@rooms = []
	@traveler = ""
	@orientation = "N"
	@room_place = 'forest'
	@in_bag = ["bottle", "matchbox"]
	@in_hands = []
	@in_room = nil
	@scope_bag = 0
	@scope_hands = 0
	@scope_room = 1
	@fail_count = 0
	@torch_identifier = 0
	@lit_torches = []
	@bottle_count = 3


end

def intro()
p rand
light_torch
turn_phase
	while true
		puts "What is your name?".chomp
		traveler = gets
		if traveler == "\n"
			puts "Come on, everyone has a name..."
		else
			@traveler = traveler.chomp.split[0]
			break
		end
	end
	puts "You have been adventuring deep into the forest, #{@traveler}.\n".center(80)
	puts "When your way is blocked by a steep stone outcropping\n".center(80)
	puts "At the foot of the outcropping there is a worn leather-bound book.\n".center(80)
	fails = 0
		while true
		puts "Enter 'take book' to pick it up, if you dare."
			input = gets
			@input = input.chomp.downcase
			if @input == 'take book'
				inputs(@input)
				while true
					puts "To have a look inside, enter the command 'inspect book'"
					input = gets
					@input = input.chomp.downcase
					if @input == 'inspect book'
						puts "You open the book and look on the first page"
						inputs(@input) ; fails = 0
						puts "Press <ENTER> to proceed."
						gets
						break
					elsif fails == 2
						puts "*cough* 'inspect book' *cough*"
						fails = 0
					else
						fails+=1
						puts fails
					end
				end
				break
			elsif fails == 2
				puts "*cough* 'take book' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
	fails = 0
	puts
	puts "The book is magic, there's no use denying it.\n"
	puts "You've brought your bag along with you to keep something like this.\n"
	puts "Press <ENTER> to proceed."
	gets 
		while true
			puts "To open your bag you have to inspect it."
			input = gets
			@input = input.chomp.downcase
				if @input == 'inspect bag'
					inputs(@input); fails = 0
						puts "Press <ENTER> to proceed."
						gets
					break
				elsif fails == 2
					puts "*cough* 'inspect bag' *cough*"
					fails = 0
				else
					fails += 1
					puts fails
				end
		end
		while true
		puts "Inspect something in your bag."
		input = gets
		@input = input.chomp.downcase
			if @input == "inspect bottle" || @input == "inspect matchbox"
				inputs(@input) ; fails = 0
				puts "Press <ENTER> to proceed."
				gets
			break
			elsif fails == 2
				puts "*cough* 'inspect bottle or matchbook' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		while true
		puts "Very interesting, now look at what you have in your hands."
		input = gets
		@input = input.chomp.downcase
			if @input == "inspect hands" || @input == "inspect hand"
				inputs(@input); fails = 0
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif fails == 2
				puts "*cough* 'inspect hands' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			
			end
		end
		puts "Now try to inspect the bottle or matchbox in your bag again."
		while true
			input = gets
			@input = input.chomp.downcase
			if @input == "inspect bag"
				inputs(@input) ; fails = 0
				puts
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif @input == "inspect bottle" || @input == "inspect matchbox"
				inputs(@input)
				puts
				puts "Odd? No. You closed the bag to look in your hands.\nInspect your bag then see what's in there."
			elsif fails == 2
				puts "*cough* 'inspect bag' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		puts "You have to open the bag before utilizing the items in it."
		puts "It 'closes' every time you look at your hands or the room you are in."
		puts "Press <ENTER> to proceed."
		gets
		while true
			puts "Good, now inspect an item in your bag."
			input = gets
			@input = input.chomp.downcase
			if @input == "inspect bottle" || @input == "inspect matchbox"
				inputs(@input) ; fails = 0
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif @input == 'inspect bag'
				inputs(@input)
				puts
			elsif fails == 2
				puts "*cough* 'inspect bottle or matchbook' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		puts
		puts "Get it? Inspect your bag to open it before looking at the objects inside."
		puts "Press <ENTER> to proceed."
		gets
		while true
			puts "Now, put the magic book in the bag."
			input = gets
			@input = input.chomp.downcase
			if @input == "put book" || @input == "place book" || @input == "drop book"
				inputs(@input); fails = 0
				break
			elsif fails == 2
				puts "*cough* 'put book' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		puts "Press <ENTER> to proceed."
		gets
		while true
		puts
		puts "Great, now look in the bag again to check it out."
			input = gets
			@input = input.chomp.downcase
			if @input == "inspect bag"
				inputs(@input); fails = 0
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif fails == 2
				puts "*cough* 'inspect bag' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		while true
		puts "Cool! Now check out what is in your hands."
			input = gets
			@input = input.chomp.downcase
			if @input == "inspect hand" || @input == "inspect hands"
				inputs(@input); fails = 0
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif fails == 2
				puts "*cough* 'inspect hands' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		while true
		puts
		puts "And now check out the book."
			input = gets
			@input = input.chomp.downcase
			if @input == "inspect book"
				inputs(@input) ; fails = 0
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif fails == 2
				puts "*cough* 'inspect book' *cough*"
				fails = 0
			else
				fails += 1
				puts fails
			end
		end
		puts
		puts "I know what you're thinking, but the book is still in the bag." 
		sleep 5
		puts "The book really is magic! (you can check it out for help anytime)"	
		puts "Press <ENTER> to proceed."
		gets
		puts "-/\\/\\/\\/\\/\\/\\/\\/\\-RUMBLE-/\\/\\/\\/\\/\\/\\/\\/\\-RUMBLE-/\\/\\/\\/\\/\\/\\/\\/\\-".center(80)
		puts "What's that noise?"
		sleep 5
		puts "-/\\/\\/\\/\\/\\/\\/\\/\\--/\\/\\/\\/\\/\\/\\/\\/\\-RUMBLE-/\\/\\/\\/\\/\\/\\/\\/\\--/\\/\\/\\/\\/\\/\\/\\/\\-".center(80)	
		sleep 3
		puts "Holy New Horizons! The rock wall in front of you just opened up!"
		puts "Talk about magic!"
		puts "Press <ENTER> to proceed."
		gets
		puts "Inspect the wall for yourself if you don't believe me..."
		while true
			input = gets
			@input = input.chomp.downcase
			if @input == "inspect wall"
				puts "There's a small opening in front of you where a solid rock wall used to be." ; fails = 0
				puts "Press <ENTER> to proceed."
				gets
				break
			elsif fails == 2
				puts "*cough* 'inspect wall' *cough*"
				fails = 0
			else
				puts "Don't believe me? It really opened up, just look!"
				fails += 1
				puts fails
			end
		end
		puts "See? I told you. This adventuring is turning into a real... adventure."
		while true
		puts "Let's go inside! Come on!"
			input = gets
			@input = input.chomp.downcase
			if @input == "go forward" || @input == "move forward" || @input == "go straight" || @input == "move straight"
				puts "You carefully step into the cave entrance..."
				break
			elsif fails == 2
				puts "*cough* 'go forward' *cough*"
				fails = 0
			else
				fails+=1
				puts fails
			end
		end
	puts "Press <ENTER> to proceed."
	gets
#	@room_place = 2
	while true
		input = gets
		@input = input.chomp.downcase
		inputs(@input)
	end
end


def inputs(string)
	if string =~(/.+lit torch/) || string =~(/.+littorch/)
		puts "do it!"
		command = string.split[0]
		@subject = "littorch".to_sym
		torch_parse(command)
	elsif string =~(/.+lit lamp/) || string =~(/.+litlamp/)
		puts "do it!"
		command = string.split[0]
		@subject = "litlamp".to_sym
		command_parse(command)
	elsif string.class == String && string.split.length == 2
		command = string.split[0]
		@subject = string.split[1].to_sym
		command_parse(command)
	else
		puts "Please enter a proper command."
	end
end

def command_parse(inquiry)
	if inquiry == "take" || inquiry == "grab" || inquiry == "pickup"
		take_command(@subject)
	elsif inquiry == "inspect"
		inspect_command(@subject)
	elsif inquiry == "put" || inquiry == "place" || inquiry == "drop"
		put_command(@subject)
	elsif inquiry == "clean" || inquiry == "wipe" || inquiry == "dust"
			clean_command(@subject)
	elsif inquiry == "move" || inquiry == "go"
		move_command(@subject)
	elsif inquiry == "light"
		light_command(@subject)	
	else
		puts "That is not something you can do."
	end
end

def clean_command(object)
	if object == :bag
		puts "You dust off your bag."
	elsif object == :hands || object == :hand;
		@scope_bag = 0; @scope_hands = 1; @scope_room = 0
		if @in_hands.any?{ |word| word == "bottle"} && @in_hands.length == 1 && @bottle_count > 0
			puts "You wash off your hands with the water from the bottle."
			@bottle_count -= 1
				if @bottle_count == 0
					find_object(:bottle).description = "An empty reusable water bottle."
				end
		elsif @in_hands.any?{ |word| word == "bottle"} && @in_hands.length == 1 && @bottle_count == 0
			puts "There is no more water to clean your hands."
		elsif @in_hands.length == 2
			puts "Your hands are too full to clean."
		else
			puts "There is nothing to clean your hands with."
		end				
	elsif object == :room
		@scope_bag = 0; @scope_hands = 0; @scope_room = 1
		puts "You try to clean the room but it is still dirty."
	elsif @scope_bag == 1
		if object == :littorch
			puts "You can't clean it, you'll burn yourself!"
		elsif @in_bag.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "You clean off the #{object}."
		elsif @in_hands.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "You clean off the #{object}."
		else
			puts "That item is not in your bag or hands to clean."
		end
	elsif @scope_hands == 1
		if object == :littorch
			puts "You can't clean it, you'll burn yourself!"
		elsif @in_hands.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "You clean off the #{object}."
		else
			puts "That item is not in your hands to clean."
		end
	elsif @scope_room == 1
		if object == :littorch
			puts "You can't clean it, you'll burn yourself!"
		elsif @in_room.any?{ |word| (word[/\D+/]).to_sym == object }
			if object == :litlamp
				puts "You clean the lamp and it shines a little brighter."
			else
				puts "You clean off the #{object}."
			end
		elsif object == :lamp
			clean_command(:litlamp)
		elsif @in_hands.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "You clean off the #{object}."
		else
			puts "That item is not around to clean."
		end
	end
end

def take_command(object)
	if @in_hands.length == 2
		puts "Your hands are too full to take anything."
	elsif @scope_bag == 1
		if @in_bag.any?{ |word| word.to_sym == object}
			puts "You take the " + object.to_s + " from the bag."
			@in_hands.push(object.to_s)
			@in_bag.delete(object.to_s)
		else
			puts "You don't have that in your bag to take."
		end
	elsif @scope_room == 1
		if @in_room.any?{ |word| word.to_sym == object}
			if object == :lamp || object == :litlamp || object == :computer || object == :monitor || object == :plaque
				puts "You can't take that object."
			else
				puts "You take the #{object} from the room."
				@in_room.delete(object.to_s)
				@in_hands.push(object.to_s)
			end
		else
			puts "It isn't in the room to take."
		end
	else
		puts "It isn't there to take. Maybe you should inspect the bag or room for it first."
	end
end

def inspect_command(object)
	if object == :bag
		in_bag
	elsif object == :hands || object == :hand;
		in_hand
	elsif object == :room
		in_room
	elsif object == :book
		puts "#{find_object(object).description}"
		inspect_book
	elsif @scope_bag == 1
		if @in_bag.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "#{find_object(object).description}"
		elsif @in_hands.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "#{find_object(object).description}"
		elsif object == :torch
			lit_torch_inspect
		else
			puts "That item is not in your bag or hands."
		end
	elsif @scope_hands == 1
		if @in_hands.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "#{find_object(object).description}"
		elsif object == :torch
			lit_torch_inspect
		else
			puts "That item is not in your hands."
		end
	elsif @scope_room == 1
		if @in_room.any?{ |word| (word[/\D+/]).to_sym == object }
			puts "#{find_object(object).description}"
		elsif @in_hands.any?{ |word| (word[/\D+/]).to_sym == object}
			puts "#{find_object(object).description}"
		elsif object == :torch
			lit_torch_inspect
		elsif object == :lamp
			inspect_command(:litlamp)
		else
			puts "That item is not around."
		end	
	end
end

def put_command(object)
	if @scope_bag == 1
		if object == :torch && @in_bag.any?{ |word| word == "torch" }
			puts "You don't have room for another torch in your bag."
		elsif @in_hands.any?{ |word| word.to_sym == object}
			puts "You put the " + object.to_s + " in the bag."
			@in_hands.delete(object.to_s)
			@in_bag.push(object.to_s)
		else
			puts "You don't have that to put."
		end
	else
		if @in_hands.any?{ |word| word == object}
			puts "You drop the #{object} in the room."
			@in_hands.delete(object)
			@in_room.push(object)
		else
			puts "You don't have that to put."
		end
	end
end

def light_command(object)
	if object == :torch || object == :lamp
		if object == :torch
			if @in_hands.any?{ |word| word == "torch"}
				if @in_hands.any?{ |word| word == "matchbox"}
					light_torch
					puts "You strike a match and light the torch with the flame."
				elsif @in_room.any?{ |word| word == "litlamp"}
					light_torch
					puts "You light the torch with the flame from the lamp."
				else
					puts "You have nothing to light the torch with!"
				end
			else
				puts "You have no torch to light!"
			end
		elsif object == :lamp
			if @in_hands.any?{ |word| word == "matchbox"}
					@in_room.each { |word| word.sub!("lamp", "litlamp")}
					puts "You strike a match and light the lamp with the flame."
			elsif @in_room.any?{ |word| word =~ /littorch\d+/}
				@in_room.each { |word| word.sub!("lamp", "litlamp")}
				puts "You put your torch to the lamp and it burns brightly."
			elsif @in_room.any?{ |word| word == "litlamp"}
					puts "The lamp is already lit."
			else
				puts "You have nothing to light the lamp with!"
			end
		end
	elsif object == :littorch || object == :litlamp
		puts "It's already lit."
	elsif object == :cat
		puts "You're a monster!"
	else
		puts "You can't light that on fire!"
	end
end

def light_torch
	#replacer = "littorch#{@torch_identifier}"
	#index = @in_hands.index("torch") and @in_hands[index] = replacer
	@lit_torches << Lit_torch.new(:littorch, "a flaming wooden torch", 1, "By the looks of it, the torch", @torch_identifier)
	@torch_identifier += 1
end

def torch_parse(inquiry)
	if inquiry == "take" || inquiry == "grab" || inquiry == "pickup"
		lit_torch_grab
	elsif inquiry == "inspect"
		lit_torch_inspect
	elsif inquiry == "put" || inquiry == "place" || inquiry == "drop"
		lit_torch_puts
	elsif inquiry == "clean" || inquiry == "wipe" || inquiry == "dust"
			puts "You can't clean that, you'll burn yourself!"
	else
		puts "That is not something you can do with a lit torch."
	end
end

def lit_torch_inspect
	if @scope_hands == 1 || @scope_bag == 1 && @in_hands.any?{ |word| word =~ /littorch/}
		@in_hands.each do |word| 
		identity = word[/\d+/]
			if identity == nil
			else
				p identity
				found_torch = find_torch(identity.to_i)
				puts "#{found_torch.description} in your hand will burn for #{found_torch.timeleft} moves."
				puts "yeaaaaa"
				identity = nil
				found_torch = nil
			end
		end
	elsif @scope_room == 1 && @in_room.any?{ |word| word =~ /littorch/}
		@in_room.each do |word| 
		identity = word[/\d+/]
			if identity == nil
			else
				p identity
				found_torch = find_torch(identity.to_i)
				puts "#{found_torch.description} in the room will burn for #{found_torch.timeleft} moves."
				identity = nil
				found_torch = nil
			end
		end
	else
		puts "There is no lit torch."
	end
end

def lit_torch_grab
torch_to_grab = []
burntime = 11
	if @in_hands.length == 2
		puts "Your hands are too full to take anything."
	elsif @in_room.any? { |object| object =~ /littorch\d*/}
		@in_room.each do |object| 
			puts object
			if object =~ /littorch\d+/
				identifier = (object[/\d+/]).to_i
				if find_torch(identifier).timeleft < burntime
					burntime = find_torch(identifier).timeleft
					torch_to_grab = object
					puts "You grab the burning torch from the ground."
				end
			end
		end
		@in_room.delete(torch_to_grab)
		@in_hands.push(torch_to_grab)	
	else
		puts "There is no lit torch here to take."
	end
end

def lit_torch_puts
torch_to_put = []
burntime = 11
	if @in_hands.any? { |object| object =~ /littorch\d*/}
		@in_hands.each do |object| 
			puts object
			if object =~ /littorch\d+/
				identifier = (object[/\d+/]).to_i
				if find_torch(identifier).timeleft < burntime
					burntime = find_torch(identifier).timeleft
					torch_to_put = object
					puts "You drop the oldest burning torch on the ground."
				end
			end
		end
		@in_hands.delete(torch_to_put)
		@in_room.push(torch_to_put)	
	else
		puts "You have no lit torch to put down."
	end
end
 
def move_command(object)
	puts "you move #{object}"
end

def turn_phase
	p @in_room
	@lit_torches.each do |torch|
		torch.timeleft -= 1
		if torch.timeleft == 0
			torch_identity = torch.identifier
			torch_to_delete = "littorch#{torch_identity}"
			puts torch_to_delete
			if @in_hands.any? { |object| object == torch_to_delete }
				@in_hands.delete_if {|object| object == torch_to_delete}
				puts "The torch you are holding burnt out."
			elsif @rooms.each do |room|
				room_objects = room.objects.flatten
				room_objects.delete_if{|object| object == torch_to_delete}
				room.objects = room_objects
				end
			end
		end
	room_items
	p @in_room
	end
	@lit_torches.delete_if {|torch| torch.timeleft == 0 }
	if @in_hands.any? { |object| object != /lit.*/ } && @in_room.any? { |object| object != /lit.*/ }
		the_Darkness
	end
end

def room_items
	@in_room = []
	current_room = find_room(@room_place)
	current_room.objects.each { |object| @in_room << object}
	@in_room = @in_room.flatten
end

def in_bag
	@scope_bag = 1; @scope_hands = 0; @scope_room = 0
	if @in_bag == 0
		puts "There is nothing in your bag."
	else
		things = []
		@in_bag.each {|object| things << find_object((object[/\D+/]).to_sym).name}
		stuff_total = "You open the bag. There is " + things.join(" and ") + " in your bag."
		puts stuff_total.scan(/.{1,80}\W/).map(&:strip)
	end
end

def the_Darkness
	tries = 1
	puts "All of your light is gone and you are lost in the Darkness!"
	puts "Needless to say, this is not good..."
	while true
		input = gets
		@input = input.chomp.downcase
		if rand < 1/tries
			tries += 1
			if @input == /move\s.*/
				put "moved"
				inputs(@input)
				break
			end
		end
		
	end
end

def in_hand
	@scope_hands = 1; @scope_bag = 0; @scope_room = 0
	if @in_hands.length == 0
		puts "There is nothing in your hands."
	else
		things = []
		@in_hands.each {|object| things << find_object((object[/\D+/]).to_sym).name}
		if things.length == 1
			puts "There is " + things[0] + " in your hand."
		else
			puts "There is " + things.join(" and ") + " in your hands."
		end
	end
end

def in_room
	@scope_room = 1;  @scope_bag = 0; @scope_hands = 0 
	if @in_room.length == 0
		puts "There is nothing in the room."		
	else
		things = []
		@in_room.each {|object| things << find_object((object[/\D+/]).to_sym).name}
		stuff_total = "There is " + things.join(" and ") + " in the room."
		puts stuff_total.scan(/.{1,80}\W/).map(&:strip)
	end
end


def inspect_book
	puts "___________________________________________________________________________".center(80)
	puts "Hello #{@traveler}, looking for some help?\n".center(80)
	puts "Here's a list of some handy commands and a short description of what they do!\n".center(80)
	puts "Type [command] [item or direction] and press ENTER".center(80)
	puts "Command \t Description"
	puts "move/go   Move your character in [direction].\n"
	puts "inspect   Inspect an [object].\n\t  Inspect your bag, hands, or the room to manipulate the items in them.\n"
	puts "take/grab Pick up an [item]."
	puts "put/place Put down an [item] in your hands."
	puts "light \t  Light  the [object] on fire (be careful!)."
	puts "clean \t  Some [items] are dirty.\n\n"
	puts "Don't forget torches burn out, it is not safe to be lost in the dark #{@traveler}!".center(80)
	puts "You will always drop and pickup the most burnt torch first.".center(80)
	puts "Do not use descriptors except for a 'lit torch'.".center(80)
	puts "____________________________________________________________________________".center(80)
	puts "Afraid to read on, you close the book."
	
end

class Object
    attr_accessor :reference, :name, :description, :optional
    def initialize(reference, name, description, optional = 0)
      @name = name
	  @reference = reference
	  @description = description
	  @optional = optional
    end

end

class Lit_torch
	attr_accessor :reference, :name, :description, :timeleft, :identifier
	def initialize(reference, name, timeleft = 10, description,  identifier)
	  @reference = reference
	  @name = name
	  @timeleft = timeleft
	  @description = description
	  @identifier = identifier
	end
end

class Room
	attr_accessor :reference, :description, :doors, :objects
	
    def initialize(reference, description, doors, *objects)
	  @reference = reference
	  @description = description
	  @doors = doors
	  @objects = objects
    end
end

def add_room(reference, description, doors, *objects)
	@rooms << Room.new(reference, description, doors, objects)
end

def add_object(reference, name, description, optional = 0)
	@objects << Object.new(reference, name, description, optional)
end

 def find_object(reference)
    @objects.detect { |object| object.reference == reference }
 end
 
def find_room(reference)
    @rooms.detect { |room| room.reference == reference }
end
 
 def find_torch(identifier)
	if identifier == nil
	else
		@lit_torches.detect { |torch| torch.identifier == identifier }
	end
end
 
  def find_bag(reference)
    @in_bag.detect { |object| object.reference == reference }
 end
 
def find_hands(reference)
   @in_hands.detect { |object| object.reference == reference }
end

	
end

my_adventure = Adventure.new

#adding objects
	my_adventure.add_object(:book, "a magical book", "A black leather-bound book with a certain feel. There are no markings on it.\nYou open to the first page.")
	my_adventure.add_object(:lamp, "a lamp", "A black metal lamp hanging on a post about 6 feet tall in the middle of the room.")
	my_adventure.add_object(:litlamp, "a lamp burning brightly", "A black metal lamp hanging on a post about 6 feet tall burning brightly.")
	my_adventure.add_object(:torch, "a torch", "A piece of wood with flammable resin inside.\nIt can be lit to provide a bright flame.")
	my_adventure.add_object(:tree, "a large dead tree", "There is a large dead tree with many branches that can be used as torches. Who knows how it got here")
	my_adventure.add_object(:branch, "a tree branch", "The branch looks like it could be taken and used as a torch.")
	my_adventure.add_object(:cat, "a cat", "It's a Siamese cat in the corner, looks friendly enough.")
	my_adventure.add_object(:hole, "a small hole in the wall", ["There is a small hole in the wall.", "You can hear scurrying inside."], 1)
	my_adventure.add_object(:keyboard, "a computer keyboard", "A standard QWERTY keyboard with numpad")
	my_adventure.add_object(:chest, "a large wooden chest", ["There is a large wooden chest with a keypad on it. It is closed"])
	my_adventure.add_object(:floppy, "a floppy disk", "An old-time floppy disk")
	my_adventure.add_object(:tablet, "a stone tablet", "INSERT WHAT STONE TABLET SAYS")
	my_adventure.add_object(:base, "a broken stone monument", "INSERT WHAT STONE BASE SAYS")
	my_adventure.add_object(:computer, "a computer", "It's an old computer, still running.")
	my_adventure.add_object(:monitor, "a monitor", "A computer monitor. It is too dusty to read")
	my_adventure.add_object(:mouse, "a mouse (computer)", "A plain-old 2-button computer mouse.")
	my_adventure.add_object(:bottle, "a bottle", "A half-full reusable water bottle.")
	my_adventure.add_object(:matchbox, "a matchbox", "A strike-on-box with so many matches you can't run out.")
	
	
	my_adventure.add_object(:littorch, "a bright flaming torch", "By the looks of it, the torch will burn for (x more movements)", 10)

#adding rooms
	my_adventure.add_room('forest', "a clearing in the forest before a stone hill", [0,0,1,0], "litlamp", "book", "littorch0")
	my_adventure.add_room(0, "a dark room with a door to the", [0,0,0,1], "tablet")
	my_adventure.add_room(1, "a dark room with a door to the", [0,1,1,0], nil)
	my_adventure.add_room(2, "a dark room with a door to the", [1,0,1,0], "lamp", "torch")
	my_adventure.add_room(3, "a dark room with a door to the", [0,0,1,1], nil)
	my_adventure.add_room(4, "a dark room with a door to the", [0,1,0,0], "hole")
	my_adventure.add_room(5, "a dark room with a door to the", [0,0,1,1], "lamp")
	my_adventure.add_room(6, "a dark room with a door to the", [1,1,0,1], nil)
	my_adventure.add_room(7, "a dark room with a door to the", [1,1,1,1], "tree")
	my_adventure.add_room(8, "a dark room with a door to the", [1,1,0,0], nil)
	my_adventure.add_room(9, "a dark room with a door to the", [0,0,1,0], "treasure chest", "keyboard")
	my_adventure.add_room(10, "a dark room with a door to the", [1,0,0,1], "cat")
	my_adventure.add_room(11, "a dark room with a door to the", [0,1,0,1], nil)
	my_adventure.add_room(12, "a dark room with a door to the", [1,1,1,1], nil)
	my_adventure.add_room(13, "a dark room with a door to the", [0,1,1,1], nil)
	my_adventure.add_room(14, "a dark room with a door to the", [1,1,0,0], nil)
	my_adventure.add_room(15, "a dark room with a door to the", [0,0,0,1], "ghost", "lamp")
	my_adventure.add_room(16, "a dark room with a door to the", [0,1,0,1], nil)
	my_adventure.add_room(17, "a dark room with a door to the", [1,1,0,0], nil)
	my_adventure.add_room(18, "a dark room with a door to the", [1,0,0,1], nil)
	my_adventure.add_room(19, "a dark room with a door to the", [0,1,0,0], "computer", "monitor", "lamp", "tablet_base")
	
	
	


#my_adventure.light_command(:torch)
#my_adventure.light_command(:torch)
my_adventure.intro
